name: observatory_management

docstring: |
  Provides operations to manage observatories and their constituent site resources.
  Manages the associations of device models and devoices to sites.
  Also provide observatory level policy control.

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+SA+OV+Observatory+Management

dependencies: [resource_registry, instrument_management, data_product_management, org_management, data_process_management, user_notification, dataset_management]

methods:
  # -----------------
  # Working with observatory domains of authority.

  create_marine_facility:
    docstring: |
      Create an Org (domain of authority) that realizes a marine facility. This Org will have
      set up roles for a marine facility. Shared resources, such as a device can only be
      registered in one marine facility Org, and additionally in many virtual observatory Orgs. The
      marine facility operators will have more extensive permissions and will supercede virtual
      observatory commands
    in:
      org: !Org
      # TBD additional args specific to set up a marine facility
    out:
      org_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  create_virtual_observatory:
    docstring: |
      Create an Org (domain of authority) that realizes a virtual observatory. This Org will have
      set up roles for a virtual observatory. Shared resources, such as a device can only be
      registered in one marine facility Org, and additionally in many virtual observatory Orgs. The
      marine facility operators will have more extensive permissions and will supercede virtual
      observatory commands
    in:
      org: !Org
      # TBD additional args specific to set up a virtual observatory
    out:
      org_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist


  # -----------------
  # Working with Observatory resources.

  create_observatory:
    docstring: |
      Create a Observatory resource. An observatory  is coupled
      with one Org. The Org is created and associated as part of this call.
    in:
      observatory: !Observatory
      org_id: ""
    out:
      observatory_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_observatory:
    docstring: Update a Observatory resource
    in:
      observatory: !Observatory
    out:
    throws:
      NotFound: object with specified id does not exist

  read_observatory:
    docstring: Read a Observatory resource
    in:
      observatory_id: ""
    out:
      observatory: !Observatory
    throws:
      NotFound: object with specified id does not exist

  delete_observatory:
    docstring: Delete a Observatory resource
    in:
      observatory_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  #@OperationVerb=DELETE
  force_delete_observatory:
    docstring: Delete a Observatory resource
    in:
      observatory_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  get_site_extension:
    docstring: |
      Returns an SiteExtension object containing additional related information
    in:
      site_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      site: !SiteExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist

  get_marine_facility_extension:
    docstring: |
      Returns an MarineFacilityOrgExtension object containing additional related information
    in:
      org_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      org: !MarineFacilityOrgExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified data_product_id does not exist

  get_observatory_site_extension:
    docstring: |
      Returns an SiteExtension object containing additional related information
    in:
      site_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      site: !SiteExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist


  get_platform_station_site_extension:
    docstring: |
      Returns an SiteExtension object containing additional related information
    in:
      site_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      site: !SiteExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist

  get_platform_assembly_site_extension:
    docstring: |
      Returns an SiteExtension object containing additional related information
    in:
      site_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      site: !SiteExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist

  get_platform_component_site_extension:
    docstring: |
      Returns an SiteExtension object containing additional related information
    in:
      site_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      site: !SiteExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist

  get_instrument_site_extension:
    docstring: |
      Returns an SiteExtension object containing additional related information
    in:
      site_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      site: !SiteExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist

  get_deployment_extension:
    docstring: |
      Returns an DeploymentExtension object containing additional related information
    in:
      deployment_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""  # An optional user id associated with the requesting user
    out:
      site: !DeploymentExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist


  # -----------------
  # Working with Subsite resources.

  create_subsite:
    docstring: |
      Create a Subsite resource. A subsite is a frame of reference within an observatory. It's parent is
      either the observatory or another subsite.
    in:
      subsite: !Subsite
      parent_id: ""
    out:
      subsite_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_subsite:
    docstring: Update a Subsite resource
    in:
      subsite: !Subsite
    out:
    throws:
      NotFound: object with specified id does not exist

  read_subsite:
    docstring: Read a Subsite resource
    in:
      subsite_id: ""
    out:
      subsite: !Subsite
    throws:
      NotFound: object with specified id does not exist

  delete_subsite:
    docstring: Delete a LogicalPlatform resource, removes assocations to parents
    in:
      subsite_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  #@OperationVerb=DELETE
  force_delete_subsite:
    docstring: Delete a LogicalPlatform resource, removes assocations to parents
    in:
      subsite_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist
  # -----------------
  # Working with PlatformSite resources.

  create_platform_site:
    docstring: |
      Create a PlatformSite resource. A platformsite is a frame of reference within an observatory. It's parent is
      either the observatory or another platformsite.
    in:
      platform_site: !PlatformSite
      parent_id: ""
    out:
      platform_site_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_platform_site:
    docstring: Update a PlatformSite resource
    in:
      platform_site: !PlatformSite
    out:
    throws:
      NotFound: object with specified id does not exist

  read_platform_site:
    docstring: Read a PlatformSite resource
    in:
      platform_site_id: ""
    out:
      platform_site: !PlatformSite
    throws:
      NotFound: object with specified id does not exist

  delete_platform_site:
    docstring: Delete a PlatformSite resource, removes assocations to parents
    in:
      platform_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  #@OperationVerb=DELETE
  force_delete_platform_site:
    docstring: Delete a PlatformSite resource, removes assocations to parents
    in:
      platform_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  # -----------------
  # Working with InstrumentSite resources.

  create_instrument_site:
    docstring: |
      Create a InstrumentSite resource. A instrumentsite is a frame of reference within an observatory. It's parent is
      either the observatory or another instrumentsite.
    in:
      instrument_site: !InstrumentSite
      parent_id: ""
    out:
      instrument_site_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_instrument_site:
    docstring: Update a InstrumentSite resource
    in:
      instrument_site: !InstrumentSite
    out:
    throws:
      NotFound: object with specified id does not exist

  read_instrument_site:
    docstring: Read a InstrumentSite resource
    in:
      instrument_site_id: ""
    out:
      instrument_site: !InstrumentSite
    throws:
      NotFound: object with specified id does not exist

  delete_instrument_site:
    docstring: Delete an InstrumentSite resource, removes assocations to parents
    in:
      instrument_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  #@OperationVerb=DELETE
  force_delete_instrument_site:
    docstring: Delete an InstrumentSite resource, removes assocations to parents
    in:
      instrument_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  # -----------------
  # Working with Deployment resources.

  create_deployment:
    docstring: |
      Create a Deployment resource. Represents a (possibly open-ended) time interval
      grouping one or more resources within a given context, such as an instrument
      deployment on a platform at an observatory site.
    in:
      deployment: !Deployment
      site_id: ""
      device_id: ""
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute

  update_deployment:
    docstring: Update a Deployment resource
    in:
      deployment: !Deployment
    out:
    throws:
      NotFound: object with specified id does not exist

  read_deployment:
    docstring: Read a Deployment resource
    in:
      deployment_id: ""
    out:
      deployment: !Deployment
    throws:
      NotFound: object with specified id does not exist

  delete_deployment:
    docstring: Delete a Deployment resource
    in:
      deployment_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  #@OperationVerb=DELETE
  force_delete_deployment:
    docstring: Delete a Deployment resource
    in:
      deployment_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  activate_deployment:
    docstring: Make the devices on this deployment the primary devices for the sites
    in:
      deployment_id: ""
      activate_subscriptions: False
    out:
    throws:
      NotFound: object with specified id does not exist
      BadRequest: if object does not have _id or _rev attribute

  deactivate_deployment:
    docstring: Remove the primary device designation for the deployed devices at the sites
    in:
      deployment_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist
      BadRequest: if devices can not be undeployed

  prepare_deployment_support:
    docstring: |
      Returns the information needed to create or update a deployment resource. The deployment_id parameter
      is optional and should be provided when updating an existing resource but not when creating a new resource.
    in:
      deployment_id: ""
    out:
      resource_schema: !DeploymentPrepareSupport
    throws:
      NotFound: An object with the specified deployment_id does not exist

  # -----------------
  # Assignments

  assign_site_to_site:
    docstring: Connects a child site (any subtype) to a parent site (any subtype)
    in:
      child_site_id: ""
      parent_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_site_from_site:
    docstring: Disconnects a child site (any subtype) from a parent site (any subtype)
    in:
      child_site_id: ""
      parent_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  assign_device_to_site:
    docstring: Connects a device (any type) to a site (any type)
    in:
      device_id: ""
      site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_device_from_site:
    docstring: Disconnects a child site (any subtype) from a parent site (any subtype)
    in:
      device_id: ""
      site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  assign_device_to_network_parent:
    docstring: Connects a device (any type) to parent in the RSN network
    in:
      child_device_id: ""
      parent_device_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_device_from_network_parent:
    docstring: Disconnects a child device (any type) from parent in the RSN network
    in:
      child_device_id: ""
      parent_device_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  # -----------------
  # Assigning resources to observatory Orgs

  assign_resource_to_observatory_org:
    docstring: Assign a resource to an observatory Org's assets.
    in:
      resource_id: ""
      org_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_resource_from_observatory_org:
    docstring: Remove a resource from a observatory Org's assets.
    in:
      resource_id: ""
      org_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  # -----------------
  # Assigning models to observatory sites

  assign_platform_model_to_platform_site:
    in:
      platform_model_id: ""
      platform_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_platform_model_from_platform_site:
    in:
      platform_model_id: ""
      platform_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  assign_instrument_model_to_instrument_site:
    in:
      instrument_model_id: ""
      instrument_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_instrument_model_from_instrument_site:
    in:
      instrument_model_id: ""
      instrument_site_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  assign_device_to_deployment:
    docstring: link a physical device to a deployment
    in:
      device_id: ""
      deployment_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_device_from_deployment:
    in:
      device_id: ""
      deployment_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  assign_site_to_deployment:
    docstring: link a site to a deployment
    in:
      site_id: ""
      deployment_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_site_from_deployment:
    in:
      site_id: ""
      deployment_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  # -----------------
  # find methods


  find_org_by_observatory:
    docstring: Return the Org resource id for a specific Observatory resource.
    in:
      observatory_id: ""
    out:
      org_list: []
    throws:
      NotFound: object with specified id does not exist



  find_related_frames_of_reference:
    in:
      input_resource_id: ""
      output_resource_type_list: []
    out:
      output_resource_lists: {}
      

  find_related_sites:
    docstring: |
      For a given parent resource id (site or org), find child sites and optionally parent sites by traversing
      the existing associations.
      exclude_site_types is a list of Site resource type names to not include in the result (e.g. InstrumentSite).
      The result is a tuple of the following elements:
      site_resources is a dict mapping site_id to Site object (or to None if id_only==True).
      site_children is a dict mapping site_id to a list of direct child site_id. Parent sites will be in if requested.
      site_devices is a dict with key site id, value list of (site type, device id, device type) tuples
      device_resources ia dict with key device id, value Device resource object
    in:
      parent_resource_id: ""
      exclude_site_types: []
      include_parents: False
      include_devices: False
      id_only: False
    out:
      site_resources: {}
      site_children: {}
      site_devices: {}
      device_resources: {}

  get_sites_devices_status:
    docstring: |
      For a given parent resource id input list, compute related sites (child sites, parent sites),
      related devices (if requested), and site/device status (if requested). The content is provided
      for all higher parent and child sites of given parent id.
      The result is a dict is a set of dicts for each site in the input site where each value dict  has the following keys in it:
      - site_resources: dict with key site id, value Site resource object or None of id_only==True
      - site_children: dict with key site/org id, value list of site ids for children
      - site_devices: dict with key site id, value list of (site type, device id, device type) tuples
      - device_resources: dict with key device id, value Device resource object
      - site_status: dict with key site id, status dict (containing keys agg, power, comms, data, loc)
    in:
      parent_resource_ids: []
      include_sites: False
      include_devices: False
      include_status: False
    out:
      result: {}


  find_site_data_products:
    docstring: |
      Determines efficiently all data products for the given site and child sites.
      For given site_id, first determine all child sites (following child hasSite associations).
      Then find all currently primary devices to all child sites (following hasDevice associations).
      Then find all data products that are derived from the devices (following hasSource associations).
      The result is a dict containing the following keys:
      - site_resources: A dict mapping site_id to Site resource object (if include_sites==True) or None
      - site_children: A dict mapping site/org id to list of site ids for children
      - site_devices: A dict mapping site id to tuple (site type, device id, device type)
      - device_resources: A dict mapping device_id to Device object (if include_devices==True)
      - device_data_products: A dict mapping device_id to data_product_id
      - data_product_resources: A dict mapping data_product_id to DataProduct resource object
    in:
      parent_resource_id: ""
      include_sites: False
      include_devices: False
      include_data_products: False
    out:
      result: {}

  # ---------------------------------------------------------
  # Marine Asset Management CRUD and Association Operators
  # ---------------------------------------------------------

  # ---------------------------------
  # AssetType resource
  # ---------------------------------
  create_asset_type:
    docstring: Create AssetType resource.
    in:
      asset_type: !AssetType
    out:
      asset_type_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_asset_type:
    docstring: Update an AssetType resource.
    in:
      asset_type: !AssetType
    out:
    throws:
      NotFound: object with specified id does not exist

  read_asset_type:
    docstring: Read an AssetType resource.
    in:
      asset_type_id: ""
    out:
      asset_type: !AssetType
    throws:
      NotFound: object with specified id does not exist

  delete_asset_type:
    docstring: Delete an AssetType resource.
    in:
      asset_type_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist.

  force_delete_asset_type:
    docstring: Delete an AssetType resource.
    in:
      asset_type_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  update_attribute_specifications:
    docstring: |
      Update AttributeSpecifications.
    in:
      resource_id: ""
      spec_dict: {}
    out:
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute.

  delete_attribute_specification:
    docstring: |
      Delete a list attribute specification(s) for a resource with resource_id,
      and return dictionary of AttributeSpecification.
    in:
      resource_id: ""
      attr_spec_names: []
    out:
      attr_specs: {}
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute.

  # ---------------------------------
  # Asset resource
  # ---------------------------------
  create_asset:
    docstring: Create an Asset resource.
    in:
      asset: !Asset
      asset_type_id:  ""    # optional id for creating association
    out:
      asset_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_asset:
    docstring: Update an Asset resource.
    in:
      asset: !Asset
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  read_asset:
    docstring: Read Asset resource.
    in:
      asset_id: ""
    out:
      asset: !Asset
    throws:
      NotFound: object with specified id does not exist

  delete_asset:
    docstring: Delete an Asset resource.
    in:
      asset_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  force_delete_asset:
    docstring: Force delete Asset resource.
    in:
      asset_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  get_asset_extension:
    docstring: |
      Returns an AssetExtension object containing additional related information.
    in:
      asset_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""             # An optional user id associated with the requesting user
    out:
      site: !AssetExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified observatory_id does not exist

  prepare_asset_support:
    docstring: |
      Returns the information needed to create or update an asset resource. The asset_id parameter
      is optional and should be provided when updating an existing resource but not when creating a new resource.
    in:
      asset_id: ""
    out:
      resource_schema: !AssetPrepareSupport
    throws:
      NotFound: An object with the specified asset_id does not exist

  assign_asset_type_to_asset:
    docstring: Link an Asset to a AssetType.
    in:
      asset_type_id: ""
      asset_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_asset_type_from_asset:
    docstring: Remove link of Asset from AssetType.
    in:
      asset_type_id: ""
      asset_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  # ---------------------------------
  # EventDurationType resource
  # ---------------------------------
  create_event_duration_type:
    docstring: Create EventDurationType resource.
    in:
      event_duration_type: !EventDurationType
    out:
      event_duration_type_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_event_duration_type:
    docstring: Update an EventDurationType resource.
    in:
      event_duration_type: !EventDurationType
    out:
    throws:
      NotFound: object with specified id does not exist

  read_event_duration_type:
    docstring: Read an EventDurationType resource.
    in:
      event_duration_type_id: ""
    out:
      event_duration_type: !EventDurationType
    throws:
      NotFound: object with specified id does not exist

  delete_event_duration_type:
    docstring: Delete an EventDurationType resource.
    in:
      event_duration_type_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist.

  force_delete_event_duration_type:
    docstring: Delete an EventDurationType resource.
    in:
      event_duration_type_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

# ---------------------------------
# EventDuration
# ---------------------------------
  create_event_duration:
    docstring: Create an EventDuration resource.
    in:
      event_duration: !EventDuration
      event_duration_type_id: ""                   # optional id for creating association
    out:
      event_duration_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_event_duration:
    docstring: Update an EventDuration resource.
    in:
      event_duration: !EventDuration
    out:
    throws:
      NotFound: object with specified id does not exist

  read_event_duration:
    docstring: Read EventDuration resource.
    in:
      event_duration_id: ""
    out:
      event_duration: !EventDuration
    throws:
      NotFound: object with specified id does not exist

  delete_event_duration:
    docstring: Delete an EventDuration resource.
    in:
      event_duration_id: ""
    out:
    throws:
      NotFOund: object with specified id does not exist

  force_delete_event_duration:
    docstring: Force delete EventDuration resource.
    in:
      event_duration_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  assign_event_duration_type_to_event_duration:
    docstring: Link a EventDuration to a EventDurationType.
    in:
      event_duration_type_id: ""
      event_duration_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  unassign_event_duration_type_from_event_duration:
    docstring: Remove link of EventDuration from EventDurationType.
    in:
      event_duration_type_id: ""
      event_duration_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  get_event_duration_extension:
    docstring: |
      Returns an EventDurationExtension object containing additional related information.
    in:
      event_duration_id: ""
      ext_associations: {}    # An optional dict of names and associations to get other associations dynamically
      ext_exclude: []         # An optional list of field names to exclude from retrieving
      user_id: ""             # An optional user id associated with the requesting user
    out:
      site: !EventDurationExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified event_duration_id does not exist

  prepare_event_duration_support:
    docstring: |
      Returns the information needed to create or update an event duration resource. The event_duration_id parameter
      is optional and should be provided when updating an existing resource but not when creating a new resource.
    in:
      event_duration_id: ""
    out:
      resource_schema: !EventDurationPrepareSupport
    throws:
      NotFound: An object with the specified event_duration_id does not exist

  # ---------------------------------
  # Asset to EventDuration association(s)
  # ---------------------------------
  assign_event_duration_to_asset:
    docstring: Link EventDuration to Asset
    in:
      event_duration_id: ""
      asset_id: ""
    out:
    throws:
      NotFound: An object with the specified event_duration_id does not exist

  unassign_event_duration_to_asset:
    docstring: Remove link EventDuration to Asset
    in:
      event_duration_id: ""
      asset_id: ""
    out:
    throws:
      NotFound: An object with the specified event_duration_id does not exist

  # ---------------------------------
  # CodeSpace
  # ---------------------------------
  create_code_space:
    docstring: Create CodeSpace resource.
    in:
      code_space: !CodeSpace
    out:
      resource_id: ""
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist

  update_code_space:
    docstring: Update an CodeSpace resource.
    in:
      code_space: !CodeSpace
    out:
    throws:
      NotFound: object with specified id does not exist

  read_code_space:
    docstring: Read an CodeSpace resource.
    in:
      resource_id: ""
    out:
      code_space: !CodeSpace
    throws:
      NotFound: object with specified id does not exist

  delete_code_space:
    docstring: Delete an CodeSpace resource.
    in:
      resource_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist.

  force_delete_code_space:
    docstring: Force delete CodeSpace resource.
    in:
      resource_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  read_codesets_by_name:
    docstring:  |
      Return list of Codeset(s) from code_space for [list of] name(s)
    in:
      resource_id: ""
      names: []
    out:
      code_sets: []
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute

  read_codes_by_name:
    docstring: |
      Return a list of Codes from CodeSpace resource having names in list.
    in:
      resource_id: ""
      names: []
      id_only: False
    out:
      codes: []
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute

  update_codes:
    docstring: |
      Update CodeSpace resource using the dictionary of codes provided.
    in:
      resource_id: ""
      codes: {}
    out:
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute

  update_codesets:
    docstring: |
      Update CodeSets in CodeSpace resource using dictionary of CodeSets provided.
    in:
      resource_id: ""
      codesets: {}
    out:
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute

  delete_codes:
    docstring: |
      Delete codes from CodeSpace; Codes to be deleted are identified in list names.
      Return list of Codes in CodeSpace (?)
    in:
      resource_id: ""
      names: []
    out:
      codes: []
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute

  delete_codesets:
    docstring: |
      Delete CodeSets from CodeSpace; CodeSets to be deleted are identified in
      list names. Return list of CodeSets in CodeSpace (?)
    in:
      resource_id: ""
      names: []
    out:
      codesets: []
    throws:
      NotFound: object with specified id does not exist.
      BadRequest: if object does not have _id or _rev attribute

  assign_asset_to_resource:
    docstring: Link a Asset to a Resource.
    in:
      asset_id: ""
      resource_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist
      BadRequest: if object does not have _id or _rev attribute

  unassign_asset_from_resource:
    docstring: Remove link of Asset from Resource.
    in:
      asset_id: ""
      resource_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist
      BadRequest: if object does not have _id or _rev attribute

  declare_asset_tracking_resources:
    docstring: |
      Determines and declares asset management resources based on xlsx content provided.
      Returns dictionary resource types and list of ids created of that type.
    in:
      content: ""
      content_type: ""
      content_encoding: ""
    out:
      response: {}

  asset_tracking_report:
    docstring: |
      Determines asset tracking resources based on system marine tracking instances content.
      Returns xls content (encoded).
    in:
    out:
      response: ""

  get_assets_picklist:
    docstring:
      find resource instances of type Asset and return list of tuples (where tuple is [res.name, res.id] )
    in:
      id_only: ""
    out:
      response: []

  get_events_picklist:
    docstring:
      find resource instances of type EventDuration and return list of tuples (where tuple is [res.name, res.id] )
    in:
      id_only: ""
    out:
      response: []

  get_altids:
    docstring:
      find resource instances of res_type; return list of alt_ids([]) [ [res.alt_ids], [res.alt_ids], ...]
    in:
      res_type: ""
    out:
      response: []
